
ADC_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5e  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d2  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000453  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001974  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f7  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000024a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  64:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z3cmdh>:

void lcd(double d)
{   char str[50] ; 
	dtostrf(d,8,4,str) ;
	lcd(str);
}
  6c:	98 2f       	mov	r25, r24
  6e:	90 7f       	andi	r25, 0xF0	; 240
  70:	94 60       	ori	r25, 0x04	; 4
  72:	98 bb       	out	0x18, r25	; 24
  74:	ef e1       	ldi	r30, 0x1F	; 31
  76:	fe e4       	ldi	r31, 0x4E	; 78
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <_Z3cmdh+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_Z3cmdh+0x12>
  7e:	00 00       	nop
  80:	c2 98       	cbi	0x18, 2	; 24
  82:	f0 e1       	ldi	r31, 0x10	; 16
  84:	8f 9f       	mul	r24, r31
  86:	c0 01       	movw	r24, r0
  88:	11 24       	eor	r1, r1
  8a:	84 60       	ori	r24, 0x04	; 4
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	8f e1       	ldi	r24, 0x1F	; 31
  90:	9e e4       	ldi	r25, 0x4E	; 78
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <_Z3cmdh+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_Z3cmdh+0x2c>
  98:	00 00       	nop
  9a:	c2 98       	cbi	0x18, 2	; 24
  9c:	08 95       	ret

0000009e <_Z9data_4bith>:
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	95 60       	ori	r25, 0x05	; 5
  a4:	98 bb       	out	0x18, r25	; 24
  a6:	ef e1       	ldi	r30, 0x1F	; 31
  a8:	fe e4       	ldi	r31, 0x4E	; 78
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z9data_4bith+0xc>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z9data_4bith+0x12>
  b0:	00 00       	nop
  b2:	c2 98       	cbi	0x18, 2	; 24
  b4:	82 95       	swap	r24
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	9e e4       	ldi	r25, 0x4E	; 78
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z9data_4bith+0x22>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z9data_4bith+0x28>
  c6:	00 00       	nop
  c8:	c2 98       	cbi	0x18, 2	; 24
  ca:	08 95       	ret

000000cc <_Z3lcdPc>:
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <_Z3lcdPc+0x18>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z9data_4bith>
  de:	89 91       	ld	r24, Y+
  e0:	81 11       	cpse	r24, r1
  e2:	fb cf       	rjmp	.-10     	; 0xda <_Z3lcdPc+0xe>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <_Z7clr_lcdv>:
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
  f0:	08 95       	ret

000000f2 <_Z3lcdi>:
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	c4 56       	subi	r28, 0x64	; 100
 104:	d1 09       	sbc	r29, r1
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	31 f4       	brne	.+12     	; 0x120 <_Z3lcdi+0x2e>
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	89 83       	std	Y+1, r24	; 0x01
 118:	1a 82       	std	Y+2, r1	; 0x02
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	2a c0       	rjmp	.+84     	; 0x174 <_Z3lcdi+0x82>
 120:	99 23       	and	r25, r25
 122:	44 f4       	brge	.+16     	; 0x134 <_Z3lcdi+0x42>
 124:	91 95       	neg	r25
 126:	81 95       	neg	r24
 128:	91 09       	sbc	r25, r1
 12a:	d9 f0       	breq	.+54     	; 0x162 <_Z3lcdi+0x70>
 12c:	ee 24       	eor	r14, r14
 12e:	e3 94       	inc	r14
 130:	f1 2c       	mov	r15, r1
 132:	02 c0       	rjmp	.+4      	; 0x138 <_Z3lcdi+0x46>
 134:	e1 2c       	mov	r14, r1
 136:	f1 2c       	mov	r15, r1
 138:	fe 01       	movw	r30, r28
 13a:	31 96       	adiw	r30, 0x01	; 1
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	0a e0       	ldi	r16, 0x0A	; 10
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	b8 01       	movw	r22, r16
 14a:	0e 94 2e 01 	call	0x25c	; 0x25c <__divmodhi4>
 14e:	80 5d       	subi	r24, 0xD0	; 208
 150:	81 93       	st	Z+, r24
 152:	86 2f       	mov	r24, r22
 154:	97 2f       	mov	r25, r23
 156:	00 97       	sbiw	r24, 0x00	; 0
 158:	a9 f7       	brne	.-22     	; 0x144 <_Z3lcdi+0x52>
 15a:	ea 94       	dec	r14
 15c:	ef 28       	or	r14, r15
 15e:	51 f4       	brne	.+20     	; 0x174 <_Z3lcdi+0x82>
 160:	02 c0       	rjmp	.+4      	; 0x166 <_Z3lcdi+0x74>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	fe 01       	movw	r30, r28
 168:	e2 0f       	add	r30, r18
 16a:	f3 1f       	adc	r31, r19
 16c:	8d e2       	ldi	r24, 0x2D	; 45
 16e:	81 83       	std	Z+1, r24	; 0x01
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	e1 e0       	ldi	r30, 0x01	; 1
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ec 0f       	add	r30, r28
 17a:	fd 1f       	adc	r31, r29
 17c:	e2 0f       	add	r30, r18
 17e:	f3 1f       	adc	r31, r19
 180:	10 82       	st	Z, r1
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	0e 94 56 01 	call	0x2ac	; 0x2ac <strrev>
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	0e 94 66 00 	call	0xcc	; 0xcc <_Z3lcdPc>
 192:	cc 59       	subi	r28, 0x9C	; 156
 194:	df 4f       	sbci	r29, 0xFF	; 255
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <_Z8init_LCDv>:

void init_LCD(void)
{	DDRB = 0xff ;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	87 bb       	out	0x17, r24	; 23
	
	/* Replace with your application code */
	cmd(0x02) ;                             //return home
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
	cmd(0x28) ;								//4 bit mode
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
	cmd(0x0e) ;								//display on , cursor blinking
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
	cmd(0x06) ;								//cursor++
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
	cmd(0x01) ;							    //cls
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
	cmd(0x80) ;								//cursor beginning to 1st line 
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 1d6:	08 95       	ret

000001d8 <main>:
 
 
int main(void)
{
    /* Replace with your application code */
	init_LCD() ; 
 1d8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z8init_LCDv>
	ADCSRA |= (1<<ADEN) ;
 1dc:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS0) ;
 1de:	30 9a       	sbi	0x06, 0	; 6
	ADCSRA |= (1<<ADPS2) ;
 1e0:	32 9a       	sbi	0x06, 2	; 6
	ADMUX  |= (1<<ADLAR) ;
 1e2:	3d 9a       	sbi	0x07, 5	; 7
	ADMUX  |= (1<<REFS0) ;
 1e4:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADIE) ;
 1e6:	33 9a       	sbi	0x06, 3	; 6
	sei() ;				 //enable GLobal interupts
 1e8:	78 94       	sei
	ADCSRA |= 1<<ADSC ;
 1ea:	36 9a       	sbi	0x06, 6	; 6
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <main+0x14>

000001ee <__vector_14>:
    {
		
    }
}
ISR(ADC_vect)
{ int result  ;
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	result = ADCW; 
 214:	c4 b1       	in	r28, 0x04	; 4
 216:	d5 b1       	in	r29, 0x05	; 5
	clr_lcd() ;  
 218:	0e 94 75 00 	call	0xea	; 0xea <_Z7clr_lcdv>
	lcd(result); 
 21c:	ce 01       	movw	r24, r28
 21e:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z3lcdi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	81 ee       	ldi	r24, 0xE1	; 225
 226:	94 e0       	ldi	r25, 0x04	; 4
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <__vector_14+0x3a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <__vector_14+0x44>
 232:	00 00       	nop
	_delay_ms(200) ; 
	ADCSRA |= 1<<ADSC ;
 234:	36 9a       	sbi	0x06, 6	; 6
	
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	7f 91       	pop	r23
 248:	6f 91       	pop	r22
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__divmodhi4>:
 25c:	97 fb       	bst	r25, 7
 25e:	07 2e       	mov	r0, r23
 260:	16 f4       	brtc	.+4      	; 0x266 <__divmodhi4+0xa>
 262:	00 94       	com	r0
 264:	07 d0       	rcall	.+14     	; 0x274 <__divmodhi4_neg1>
 266:	77 fd       	sbrc	r23, 7
 268:	09 d0       	rcall	.+18     	; 0x27c <__divmodhi4_neg2>
 26a:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 26e:	07 fc       	sbrc	r0, 7
 270:	05 d0       	rcall	.+10     	; 0x27c <__divmodhi4_neg2>
 272:	3e f4       	brtc	.+14     	; 0x282 <__divmodhi4_exit>

00000274 <__divmodhi4_neg1>:
 274:	90 95       	com	r25
 276:	81 95       	neg	r24
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	08 95       	ret

0000027c <__divmodhi4_neg2>:
 27c:	70 95       	com	r23
 27e:	61 95       	neg	r22
 280:	7f 4f       	sbci	r23, 0xFF	; 255

00000282 <__divmodhi4_exit>:
 282:	08 95       	ret

00000284 <__udivmodhi4>:
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	51 e1       	ldi	r21, 0x11	; 17
 28a:	07 c0       	rjmp	.+14     	; 0x29a <__udivmodhi4_ep>

0000028c <__udivmodhi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	a6 17       	cp	r26, r22
 292:	b7 07       	cpc	r27, r23
 294:	10 f0       	brcs	.+4      	; 0x29a <__udivmodhi4_ep>
 296:	a6 1b       	sub	r26, r22
 298:	b7 0b       	sbc	r27, r23

0000029a <__udivmodhi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	5a 95       	dec	r21
 2a0:	a9 f7       	brne	.-22     	; 0x28c <__udivmodhi4_loop>
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	08 95       	ret

000002ac <strrev>:
 2ac:	dc 01       	movw	r26, r24
 2ae:	fc 01       	movw	r30, r24
 2b0:	67 2f       	mov	r22, r23
 2b2:	71 91       	ld	r23, Z+
 2b4:	77 23       	and	r23, r23
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <strrev+0x4>
 2b8:	32 97       	sbiw	r30, 0x02	; 2
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <strrev+0x18>
 2bc:	7c 91       	ld	r23, X
 2be:	6d 93       	st	X+, r22
 2c0:	70 83       	st	Z, r23
 2c2:	62 91       	ld	r22, -Z
 2c4:	ae 17       	cp	r26, r30
 2c6:	bf 07       	cpc	r27, r31
 2c8:	c8 f3       	brcs	.-14     	; 0x2bc <strrev+0x10>
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
