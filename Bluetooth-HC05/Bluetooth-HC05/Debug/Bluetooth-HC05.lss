
Bluetooth-HC05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000292  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dcd  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000736  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000634  00000000  00000000  000018ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049b  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000094c  00000000  00000000  000025b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002eff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  64:	0c 94 47 01 	jmp	0x28e	; 0x28e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z3cmdh>:
void UART_Tx(double data)
{
	char str[50] ;
	dtostrf(data,8,4,str) ;
	UART_Tx(str);
}
  6c:	98 2f       	mov	r25, r24
  6e:	90 7f       	andi	r25, 0xF0	; 240
  70:	94 60       	ori	r25, 0x04	; 4
  72:	98 bb       	out	0x18, r25	; 24
  74:	ef e3       	ldi	r30, 0x3F	; 63
  76:	fc e9       	ldi	r31, 0x9C	; 156
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <_Z3cmdh+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_Z3cmdh+0x12>
  7e:	00 00       	nop
  80:	c2 98       	cbi	0x18, 2	; 24
  82:	f0 e1       	ldi	r31, 0x10	; 16
  84:	8f 9f       	mul	r24, r31
  86:	c0 01       	movw	r24, r0
  88:	11 24       	eor	r1, r1
  8a:	84 60       	ori	r24, 0x04	; 4
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	8f e3       	ldi	r24, 0x3F	; 63
  90:	9c e9       	ldi	r25, 0x9C	; 156
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <_Z3cmdh+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_Z3cmdh+0x2c>
  98:	00 00       	nop
  9a:	c2 98       	cbi	0x18, 2	; 24
  9c:	08 95       	ret

0000009e <_Z9data_4bith>:
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	95 60       	ori	r25, 0x05	; 5
  a4:	98 bb       	out	0x18, r25	; 24
  a6:	ef e3       	ldi	r30, 0x3F	; 63
  a8:	fc e9       	ldi	r31, 0x9C	; 156
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z9data_4bith+0xc>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z9data_4bith+0x12>
  b0:	00 00       	nop
  b2:	c2 98       	cbi	0x18, 2	; 24
  b4:	82 95       	swap	r24
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9c e9       	ldi	r25, 0x9C	; 156
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z9data_4bith+0x22>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z9data_4bith+0x28>
  c6:	00 00       	nop
  c8:	c2 98       	cbi	0x18, 2	; 24
  ca:	08 95       	ret

000000cc <_Z3lcdPc>:
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <_Z3lcdPc+0x18>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z9data_4bith>
  de:	89 91       	ld	r24, Y+
  e0:	81 11       	cpse	r24, r1
  e2:	fb cf       	rjmp	.-10     	; 0xda <_Z3lcdPc+0xe>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <_Z7clr_lcdv>:
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
  f0:	08 95       	ret

000000f2 <_Z8init_LCDv>:
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 102:	8e e0       	ldi	r24, 0x0E	; 14
 104:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 11a:	08 95       	ret

0000011c <_Z9init_UARTj>:
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	aa 1f       	adc	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	9c 01       	movw	r18, r24
 132:	ad 01       	movw	r20, r26
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	44 1f       	adc	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	44 1f       	adc	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	74 e2       	ldi	r23, 0x24	; 36
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 25 01 	call	0x24a	; 0x24a <__udivmodsi4>
 150:	da 01       	movw	r26, r20
 152:	c9 01       	movw	r24, r18
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	89 2f       	mov	r24, r25
 15c:	9a 2f       	mov	r25, r26
 15e:	ab 2f       	mov	r26, r27
 160:	bb 27       	eor	r27, r27
 162:	80 bd       	out	0x20, r24	; 32
 164:	21 50       	subi	r18, 0x01	; 1
 166:	29 b9       	out	0x09, r18	; 9
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	88 61       	ori	r24, 0x18	; 24
 16c:	8a b9       	out	0x0a, r24	; 10
 16e:	80 b5       	in	r24, 0x20	; 32
 170:	86 68       	ori	r24, 0x86	; 134
 172:	80 bd       	out	0x20, r24	; 32
 174:	08 95       	ret

00000176 <_Z7UART_Txc>:
 176:	5d 9b       	sbis	0x0b, 5	; 11
 178:	fe cf       	rjmp	.-4      	; 0x176 <_Z7UART_Txc>
 17a:	50 98       	cbi	0x0a, 0	; 10
 17c:	8c b9       	out	0x0c, r24	; 12
 17e:	08 95       	ret

00000180 <_Z7UART_TxPc>:
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
 186:	5d 9b       	sbis	0x0b, 5	; 11
 188:	fe cf       	rjmp	.-4      	; 0x186 <_Z7UART_TxPc+0x6>
 18a:	88 81       	ld	r24, Y
 18c:	88 23       	and	r24, r24
 18e:	31 f0       	breq	.+12     	; 0x19c <_Z7UART_TxPc+0x1c>
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	0e 94 bb 00 	call	0x176	; 0x176 <_Z7UART_Txc>
 196:	89 91       	ld	r24, Y+
 198:	81 11       	cpse	r24, r1
 19a:	fb cf       	rjmp	.-10     	; 0x192 <_Z7UART_TxPc+0x12>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 bb 00 	call	0x176	; 0x176 <_Z7UART_Txc>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <_Z7UART_Rxv>:

unsigned char UART_Rx()
{
	while (! (UCSRA & (1<<RXC)) ) ;
 1a8:	5f 9b       	sbis	0x0b, 7	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <_Z7UART_Rxv>
	return UDR ;
 1ac:	8c b1       	in	r24, 0x0c	; 12
}
 1ae:	08 95       	ret

000001b0 <_Z8UART_strPc>:
void UART_str(char *string)  //Receive a character until CR or LF

{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	8c 01       	movw	r16, r24

	char i=0,J=0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <_Z8UART_strPc+0xe>

		*(string+i)= UART_Rx();

		J = *(string+i);

		i++;
 1bc:	c9 2f       	mov	r28, r25

	do

	{

		*(string+i)= UART_Rx();
 1be:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z7UART_Rxv>
 1c2:	f8 01       	movw	r30, r16
 1c4:	ec 0f       	add	r30, r28
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 83       	st	Z, r24

		J = *(string+i);

		i++;
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	9c 0f       	add	r25, r28

	}

	while((J!='\n') && (J!='\r'));
 1ce:	8a 30       	cpi	r24, 0x0A	; 10
 1d0:	11 f0       	breq	.+4      	; 0x1d6 <_Z8UART_strPc+0x26>
 1d2:	8d 30       	cpi	r24, 0x0D	; 13
 1d4:	99 f7       	brne	.-26     	; 0x1bc <_Z8UART_strPc+0xc>

	i++;

	*(string+i) = '\0';
 1d6:	ce 5f       	subi	r28, 0xFE	; 254
 1d8:	f8 01       	movw	r30, r16
 1da:	ec 0f       	add	r30, r28
 1dc:	f1 1d       	adc	r31, r1
 1de:	10 82       	st	Z, r1

}
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <main>:
#include <UART.h>
#include <util/delay.h>
#include <string.h>

int main(void)
{	init_LCD() ; 
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	e2 97       	sbiw	r28, 0x32	; 50
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z8init_LCDv>
	init_UART(38400) ;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	96 e9       	ldi	r25, 0x96	; 150
 204:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z9init_UARTj>
	 char c , str[50] ; 
	 
    //DDRA |= (1<<DDB7) ; 
	    while (1) 
    {	//UART_Tx("HELLO") ; 
		memset(str,0,50) ;  
 208:	0f 2e       	mov	r0, r31
 20a:	f2 e3       	ldi	r31, 0x32	; 50
 20c:	ff 2e       	mov	r15, r31
 20e:	f0 2d       	mov	r31, r0
 210:	8e 01       	movw	r16, r28
 212:	0f 5f       	subi	r16, 0xFF	; 255
 214:	1f 4f       	sbci	r17, 0xFF	; 255
 216:	f8 01       	movw	r30, r16
 218:	2f 2d       	mov	r18, r15
 21a:	11 92       	st	Z+, r1
 21c:	2a 95       	dec	r18
 21e:	e9 f7       	brne	.-6      	; 0x21a <main+0x32>
		UART_str(str) ;
 220:	c8 01       	movw	r24, r16
 222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z8UART_strPc>
		clr_lcd() ; 
 226:	0e 94 75 00 	call	0xea	; 0xea <_Z7clr_lcdv>
	    lcd(str) ;
 22a:	c8 01       	movw	r24, r16
 22c:	0e 94 66 00 	call	0xcc	; 0xcc <_Z3lcdPc>
		
		UART_Tx(str) ;  
 230:	c8 01       	movw	r24, r16
 232:	0e 94 c0 00 	call	0x180	; 0x180 <_Z7UART_TxPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	e7 e2       	ldi	r30, 0x27	; 39
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e0 40       	sbci	r30, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x54>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x5e>
 246:	00 00       	nop
 248:	e6 cf       	rjmp	.-52     	; 0x216 <main+0x2e>

0000024a <__udivmodsi4>:
 24a:	a1 e2       	ldi	r26, 0x21	; 33
 24c:	1a 2e       	mov	r1, r26
 24e:	aa 1b       	sub	r26, r26
 250:	bb 1b       	sub	r27, r27
 252:	fd 01       	movw	r30, r26
 254:	0d c0       	rjmp	.+26     	; 0x270 <__udivmodsi4_ep>

00000256 <__udivmodsi4_loop>:
 256:	aa 1f       	adc	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	ee 1f       	adc	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	a2 17       	cp	r26, r18
 260:	b3 07       	cpc	r27, r19
 262:	e4 07       	cpc	r30, r20
 264:	f5 07       	cpc	r31, r21
 266:	20 f0       	brcs	.+8      	; 0x270 <__udivmodsi4_ep>
 268:	a2 1b       	sub	r26, r18
 26a:	b3 0b       	sbc	r27, r19
 26c:	e4 0b       	sbc	r30, r20
 26e:	f5 0b       	sbc	r31, r21

00000270 <__udivmodsi4_ep>:
 270:	66 1f       	adc	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	88 1f       	adc	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	1a 94       	dec	r1
 27a:	69 f7       	brne	.-38     	; 0x256 <__udivmodsi4_loop>
 27c:	60 95       	com	r22
 27e:	70 95       	com	r23
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	bd 01       	movw	r22, r26
 28a:	cf 01       	movw	r24, r30
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
