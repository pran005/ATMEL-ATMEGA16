
Nokia5110_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003e2  00800060  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4f  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  0000119b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000481  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d2  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038d  00000000  00000000  000022f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000267f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 34       	cpi	r26, 0x42	; 66
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  7a:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z15SPI_Master_initv>:
}
void SPI_slave_init()
{
	DDRB &= ~(1<<MOSI)|(1<<SCK)|(1<<SS) ;
	DDRB |=  (1<<MISO) ;
	SPCR |=  (1<<SPE)  ;
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 6b       	ori	r24, 0xB0	; 176
  86:	87 bb       	out	0x17, r24	; 23
  88:	be 98       	cbi	0x17, 6	; 23
  8a:	8d b1       	in	r24, 0x0d	; 13
  8c:	81 65       	ori	r24, 0x51	; 81
  8e:	8d b9       	out	0x0d, r24	; 13
  90:	c4 98       	cbi	0x18, 4	; 24
  92:	08 95       	ret

00000094 <_Z15SPI_Communicatec>:
  94:	8f b9       	out	0x0f, r24	; 15
  96:	77 9b       	sbis	0x0e, 7	; 14
  98:	fe cf       	rjmp	.-4      	; 0x96 <_Z15SPI_Communicatec+0x2>
  9a:	8f b1       	in	r24, 0x0f	; 15
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	08 95       	ret

000000a0 <_Z5Resetv>:
#define RESET 0 
#define DC    1
 
void Reset()
{
	PORTB &= ~(1<<RESET) ; 
  a0:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f e7       	ldi	r18, 0x7F	; 127
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	95 e0       	ldi	r25, 0x05	; 5
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <_Z5Resetv+0x8>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <_Z5Resetv+0x12>
  b2:	00 00       	nop
	_delay_ms(105) ; 
	PORTB |=  (1<<RESET) ; 
  b4:	c0 9a       	sbi	0x18, 0	; 24
  b6:	08 95       	ret

000000b8 <_Z9Nokia_cmdc>:
}
void Nokia_cmd(char cmd)
{
	PORTB &= ~(1<<DC) ; 
  b8:	c1 98       	cbi	0x18, 1	; 24
	SS_low ; 
  ba:	c4 98       	cbi	0x18, 4	; 24
	SPI_Communicate(cmd) ; 
  bc:	0e 94 4a 00 	call	0x94	; 0x94 <_Z15SPI_Communicatec>
	PORTB |= (1<<DC) ; ;
  c0:	c1 9a       	sbi	0x18, 1	; 24
	SS_high ;  
  c2:	c4 9a       	sbi	0x18, 4	; 24
  c4:	08 95       	ret

000000c6 <_Z10Nokia_DataPc>:

}
void Nokia_Data(char* data) 
{
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	PORTB |= (1<<DC) ; 
  d2:	c1 9a       	sbi	0x18, 1	; 24
	SS_low ; 
  d4:	c4 98       	cbi	0x18, 4	; 24
	int len = strlen(data);
  d6:	fc 01       	movw	r30, r24
  d8:	01 90       	ld	r0, Z+
  da:	00 20       	and	r0, r0
  dc:	e9 f7       	brne	.-6      	; 0xd8 <_Z10Nokia_DataPc+0x12>
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	e8 1b       	sub	r30, r24
  e2:	f9 0b       	sbc	r31, r25
		for (int i=0 ; i<len ;i++)
  e4:	1e 16       	cp	r1, r30
  e6:	1f 06       	cpc	r1, r31
  e8:	2c f5       	brge	.+74     	; 0x134 <_Z10Nokia_DataPc+0x6e>
  ea:	ec 01       	movw	r28, r24
  ec:	8c 01       	movw	r16, r24
  ee:	0e 0f       	add	r16, r30
  f0:	1f 1f       	adc	r17, r31
	PORTB |= (1<<DC) ; ;
	SS_high ;  

}
void Nokia_Data(char* data) 
{
  f2:	e1 2c       	mov	r14, r1
  f4:	f1 2c       	mov	r15, r1
	int len = strlen(data);
		for (int i=0 ; i<len ;i++)
	{
		for(int y_addr=0; y_addr<5; y_addr++)
		{
			SPI_Communicate(NOKIA_CHAR[data[i]-0x20][y_addr]) ; 
  f6:	88 81       	ld	r24, Y
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	80 97       	sbiw	r24, 0x20	; 32
  fc:	fc 01       	movw	r30, r24
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e8 0f       	add	r30, r24
 108:	f9 1f       	adc	r31, r25
 10a:	ee 59       	subi	r30, 0x9E	; 158
 10c:	fd 4f       	sbci	r31, 0xFD	; 253
 10e:	ee 0d       	add	r30, r14
 110:	ff 1d       	adc	r31, r15
 112:	80 81       	ld	r24, Z
 114:	0e 94 4a 00 	call	0x94	; 0x94 <_Z15SPI_Communicatec>
	PORTB |= (1<<DC) ; 
	SS_low ; 
	int len = strlen(data);
		for (int i=0 ; i<len ;i++)
	{
		for(int y_addr=0; y_addr<5; y_addr++)
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	e8 1a       	sub	r14, r24
 11c:	f8 0a       	sbc	r15, r24
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	e8 16       	cp	r14, r24
 122:	f1 04       	cpc	r15, r1
 124:	41 f7       	brne	.-48     	; 0xf6 <_Z10Nokia_DataPc+0x30>
		{
			SPI_Communicate(NOKIA_CHAR[data[i]-0x20][y_addr]) ; 
		}
		SPI_Communicate(0x00) ; 
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 4a 00 	call	0x94	; 0x94 <_Z15SPI_Communicatec>
 12c:	21 96       	adiw	r28, 0x01	; 1
void Nokia_Data(char* data) 
{
	PORTB |= (1<<DC) ; 
	SS_low ; 
	int len = strlen(data);
		for (int i=0 ; i<len ;i++)
 12e:	0c 17       	cp	r16, r28
 130:	1d 07       	cpc	r17, r29
 132:	f9 f6       	brne	.-66     	; 0xf2 <_Z10Nokia_DataPc+0x2c>
		{
			SPI_Communicate(NOKIA_CHAR[data[i]-0x20][y_addr]) ; 
		}
		SPI_Communicate(0x00) ; 
	}
	SS_high ; 
 134:	c4 9a       	sbi	0x18, 4	; 24
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	08 95       	ret

00000144 <_Z8positioncc>:
void position(char x , char y)
{
 144:	cf 93       	push	r28
 146:	c6 2f       	mov	r28, r22
	Nokia_cmd(x);
 148:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9Nokia_cmdc>
	Nokia_cmd(y);
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9Nokia_cmdc>
}
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <_Z11clr_displayv>:
void clr_display()
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	SS_low ; 
 15a:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1<<DC);
 15c:	c1 9a       	sbi	0x18, 1	; 24
 15e:	c8 ef       	ldi	r28, 0xF8	; 248
 160:	d1 e0       	ldi	r29, 0x01	; 1
	for (int i=0; i<=503; i++)														// 503 is last pixel address 
	{
		SPI_Communicate(0x00);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 4a 00 	call	0x94	; 0x94 <_Z15SPI_Communicatec>
 168:	21 97       	sbiw	r28, 0x01	; 1
}
void clr_display()
{
	SS_low ; 
	PORTB |= (1<<DC);
	for (int i=0; i<=503; i++)														// 503 is last pixel address 
 16a:	d9 f7       	brne	.-10     	; 0x162 <_Z11clr_displayv+0xc>
	{
		SPI_Communicate(0x00);
	}
	PORTB &= ~(1<<DC);
 16c:	c1 98       	cbi	0x18, 1	; 24
	SS_high ;
 16e:	c4 9a       	sbi	0x18, 4	; 24
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <_Z18init_NOKIA_displayv>:
void init_NOKIA_display()
{
	Reset() ;
 176:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z5Resetv>
	Nokia_cmd(0x21)			;													//extended instruction set
 17a:	81 e2       	ldi	r24, 0x21	; 33
 17c:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9Nokia_cmdc>
	Nokia_cmd(0xC0)			;													//Operating Voltage = 5v , Vop 
 180:	80 ec       	ldi	r24, 0xC0	; 192
 182:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9Nokia_cmdc>
	Nokia_cmd(0x07)			;													//temp coeff 3 
 186:	87 e0       	ldi	r24, 0x07	; 7
 188:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9Nokia_cmdc>
	Nokia_cmd(0x13)			;													//set voltage bias val 
 18c:	83 e1       	ldi	r24, 0x13	; 19
 18e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9Nokia_cmdc>
	Nokia_cmd(0x20)			;													//Basic Instruction Set 
 192:	80 e2       	ldi	r24, 0x20	; 32
 194:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9Nokia_cmdc>
	Nokia_cmd(0x0C)			;													//Normal display mode 
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9Nokia_cmdc>
 19e:	08 95       	ret

000001a0 <_Z11Nokia_imagePKh>:
}
void Nokia_image(const unsigned char *image_data)		/* clear the Display */
{
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	SS_low; 
 1a8:	c4 98       	cbi	0x18, 4	; 24
    PORTB |= (1<<DC);
 1aa:	c1 9a       	sbi	0x18, 1	; 24
 1ac:	ec 01       	movw	r28, r24
 1ae:	8c 01       	movw	r16, r24
 1b0:	08 50       	subi	r16, 0x08	; 8
 1b2:	1e 4f       	sbci	r17, 0xFE	; 254
	for (int i=0; i<=503; i++)
	{
		SPI_Communicate(image_data[i]);
 1b4:	89 91       	ld	r24, Y+
 1b6:	0e 94 4a 00 	call	0x94	; 0x94 <_Z15SPI_Communicatec>
}
void Nokia_image(const unsigned char *image_data)		/* clear the Display */
{
	SS_low; 
    PORTB |= (1<<DC);
	for (int i=0; i<=503; i++)
 1ba:	c0 17       	cp	r28, r16
 1bc:	d1 07       	cpc	r29, r17
 1be:	d1 f7       	brne	.-12     	; 0x1b4 <_Z11Nokia_imagePKh+0x14>
	{
		SPI_Communicate(image_data[i]);
	}
	PORTB &= ~(1<<DC);
 1c0:	c1 98       	cbi	0x18, 1	; 24
	SS_high ; 
 1c2:	c4 9a       	sbi	0x18, 4	; 24
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <main>:

int main(void)
{
   DDRB |= (1<<RESET)|(1<<DC) ; 
 1ce:	87 b3       	in	r24, 0x17	; 23
 1d0:	83 60       	ori	r24, 0x03	; 3
 1d2:	87 bb       	out	0x17, r24	; 23
   SPI_Master_init() ; 
 1d4:	0e 94 41 00 	call	0x82	; 0x82 <_Z15SPI_Master_initv>
   init_NOKIA_display() ; 
 1d8:	0e 94 bb 00 	call	0x176	; 0x176 <_Z18init_NOKIA_displayv>
   clr_display() ; 
 1dc:	0e 94 ab 00 	call	0x156	; 0x156 <_Z11clr_displayv>
   position(0x8C,0x42) ;														//Refer Data sheet for Addressing Schemes		
 1e0:	62 e4       	ldi	r22, 0x42	; 66
 1e2:	8c e8       	ldi	r24, 0x8C	; 140
 1e4:	0e 94 a2 00 	call	0x144	; 0x144 <_Z8positioncc>
   Nokia_Data("PRAN LABS") ; 
 1e8:	80 e6       	ldi	r24, 0x60	; 96
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z10Nokia_DataPc>
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	83 ed       	ldi	r24, 0xD3	; 211
 1f4:	90 e3       	ldi	r25, 0x30	; 48
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x28>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x32>
 200:	00 00       	nop
   _delay_ms(1000) ; 
   position(0x40,0x80) ;
 202:	60 e8       	ldi	r22, 0x80	; 128
 204:	80 e4       	ldi	r24, 0x40	; 64
 206:	0e 94 a2 00 	call	0x144	; 0x144 <_Z8positioncc>
  Nokia_image(dog) ; 
 20a:	8a e6       	ldi	r24, 0x6A	; 106
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11Nokia_imagePKh>
 212:	ff cf       	rjmp	.-2      	; 0x212 <main+0x44>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
