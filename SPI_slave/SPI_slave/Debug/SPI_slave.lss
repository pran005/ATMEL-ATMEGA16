
SPI_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000292  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bbf  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ff  00000000  00000000  00000f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051e  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000479  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d6  00000000  00000000  00002191  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002867  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  64:	0c 94 47 01 	jmp	0x28e	; 0x28e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z3cmdh>:
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS) ;
	DDRB &= ~(1<<MISO) ;
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0) ;
	SPSR &= ~(1<<SPI2X);
	SS_low ;
  6c:	98 2f       	mov	r25, r24
  6e:	90 7f       	andi	r25, 0xF0	; 240
  70:	98 60       	ori	r25, 0x08	; 8
  72:	95 bb       	out	0x15, r25	; 21
  74:	e3 ec       	ldi	r30, 0xC3	; 195
  76:	f9 e0       	ldi	r31, 0x09	; 9
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <_Z3cmdh+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_Z3cmdh+0x12>
  7e:	00 00       	nop
  80:	ab 98       	cbi	0x15, 3	; 21
  82:	f0 e1       	ldi	r31, 0x10	; 16
  84:	8f 9f       	mul	r24, r31
  86:	c0 01       	movw	r24, r0
  88:	11 24       	eor	r1, r1
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	83 ec       	ldi	r24, 0xC3	; 195
  90:	99 e0       	ldi	r25, 0x09	; 9
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <_Z3cmdh+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_Z3cmdh+0x2c>
  98:	00 00       	nop
  9a:	ab 98       	cbi	0x15, 3	; 21
  9c:	08 95       	ret

0000009e <_Z9data_4bith>:
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	9c 60       	ori	r25, 0x0C	; 12
  a4:	95 bb       	out	0x15, r25	; 21
  a6:	e3 ec       	ldi	r30, 0xC3	; 195
  a8:	f9 e0       	ldi	r31, 0x09	; 9
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z9data_4bith+0xc>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z9data_4bith+0x12>
  b0:	00 00       	nop
  b2:	ab 98       	cbi	0x15, 3	; 21
  b4:	82 95       	swap	r24
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	8c 60       	ori	r24, 0x0C	; 12
  ba:	85 bb       	out	0x15, r24	; 21
  bc:	83 ec       	ldi	r24, 0xC3	; 195
  be:	99 e0       	ldi	r25, 0x09	; 9
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z9data_4bith+0x22>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z9data_4bith+0x28>
  c6:	00 00       	nop
  c8:	ab 98       	cbi	0x15, 3	; 21
  ca:	08 95       	ret

000000cc <_Z3lcdPc>:
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <_Z3lcdPc+0x18>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z9data_4bith>
  de:	89 91       	ld	r24, Y+
  e0:	81 11       	cpse	r24, r1
  e2:	fb cf       	rjmp	.-10     	; 0xda <_Z3lcdPc+0xe>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <_Z7clr_lcdv>:
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
  f0:	08 95       	ret

000000f2 <_Z3lcdi>:
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	c4 56       	subi	r28, 0x64	; 100
 104:	d1 09       	sbc	r29, r1
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	31 f4       	brne	.+12     	; 0x120 <_Z3lcdi+0x2e>
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	89 83       	std	Y+1, r24	; 0x01
 118:	1a 82       	std	Y+2, r1	; 0x02
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	2a c0       	rjmp	.+84     	; 0x174 <_Z3lcdi+0x82>
 120:	99 23       	and	r25, r25
 122:	44 f4       	brge	.+16     	; 0x134 <_Z3lcdi+0x42>
 124:	91 95       	neg	r25
 126:	81 95       	neg	r24
 128:	91 09       	sbc	r25, r1
 12a:	d9 f0       	breq	.+54     	; 0x162 <_Z3lcdi+0x70>
 12c:	ee 24       	eor	r14, r14
 12e:	e3 94       	inc	r14
 130:	f1 2c       	mov	r15, r1
 132:	02 c0       	rjmp	.+4      	; 0x138 <_Z3lcdi+0x46>
 134:	e1 2c       	mov	r14, r1
 136:	f1 2c       	mov	r15, r1
 138:	fe 01       	movw	r30, r28
 13a:	31 96       	adiw	r30, 0x01	; 1
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	0a e0       	ldi	r16, 0x0A	; 10
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	b8 01       	movw	r22, r16
 14a:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
 14e:	80 5d       	subi	r24, 0xD0	; 208
 150:	81 93       	st	Z+, r24
 152:	86 2f       	mov	r24, r22
 154:	97 2f       	mov	r25, r23
 156:	00 97       	sbiw	r24, 0x00	; 0
 158:	a9 f7       	brne	.-22     	; 0x144 <_Z3lcdi+0x52>
 15a:	ea 94       	dec	r14
 15c:	ef 28       	or	r14, r15
 15e:	51 f4       	brne	.+20     	; 0x174 <_Z3lcdi+0x82>
 160:	02 c0       	rjmp	.+4      	; 0x166 <_Z3lcdi+0x74>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	fe 01       	movw	r30, r28
 168:	e2 0f       	add	r30, r18
 16a:	f3 1f       	adc	r31, r19
 16c:	8d e2       	ldi	r24, 0x2D	; 45
 16e:	81 83       	std	Z+1, r24	; 0x01
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	e1 e0       	ldi	r30, 0x01	; 1
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ec 0f       	add	r30, r28
 17a:	fd 1f       	adc	r31, r29
 17c:	e2 0f       	add	r30, r18
 17e:	f3 1f       	adc	r31, r19
 180:	10 82       	st	Z, r1
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	0e 94 37 01 	call	0x26e	; 0x26e <strrev>
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	0e 94 66 00 	call	0xcc	; 0xcc <_Z3lcdPc>
 192:	cc 59       	subi	r28, 0x9C	; 156
 194:	df 4f       	sbci	r29, 0xFF	; 255
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <_Z8init_LCDv>:
 1ae:	8c ef       	ldi	r24, 0xFC	; 252
 1b0:	84 bb       	out	0x14, r24	; 20
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
 1d6:	08 95       	ret

000001d8 <_Z15SPI_Communicatec>:
}
unsigned char SPI_Communicate(char data)
{
	
	SPDR = data ;
 1d8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))) ;
 1da:	77 9b       	sbis	0x0e, 7	; 14
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <_Z15SPI_Communicatec+0x2>
	return SPDR ;
 1de:	8f b1       	in	r24, 0x0f	; 15
}
 1e0:	08 95       	ret

000001e2 <_Z14SPI_slave_initv>:

void SPI_slave_init()
{
	DDRB &= ~(1<<MOSI)|(1<<SCK)|(1<<SS) ;
 1e2:	bd 98       	cbi	0x17, 5	; 23
	DDRB |=  (1<<MISO) ;
 1e4:	be 9a       	sbi	0x17, 6	; 23
	SPCR |=  (1<<SPE)  ;
 1e6:	6e 9a       	sbi	0x0d, 6	; 13
 1e8:	08 95       	ret

000001ea <main>:
}


int main(void)
{
    init_LCD() ; 
 1ea:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z8init_LCDv>
	SPI_slave_init() ; 
 1ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14SPI_slave_initv>
	char recieve,data = 255 ;  
 1f2:	cf ef       	ldi	r28, 0xFF	; 255
    while (1) 
    {
		recieve = SPI_Communicate(data);
 1f4:	8c 2f       	mov	r24, r28
 1f6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Z15SPI_Communicatec>
 1fa:	d8 2f       	mov	r29, r24
		clr_lcd() ; 
 1fc:	0e 94 75 00 	call	0xea	; 0xea <_Z7clr_lcdv>
		lcd(recieve) ; 
 200:	8d 2f       	mov	r24, r29
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z3lcdi>
		cmd(0xC0) ; 
 208:	80 ec       	ldi	r24, 0xC0	; 192
 20a:	0e 94 36 00 	call	0x6c	; 0x6c <_Z3cmdh>
		lcd(data--) ;  
 20e:	df ef       	ldi	r29, 0xFF	; 255
 210:	dc 0f       	add	r29, r28
 212:	8c 2f       	mov	r24, r28
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z3lcdi>
 21a:	cd 2f       	mov	r28, r29
 21c:	eb cf       	rjmp	.-42     	; 0x1f4 <main+0xa>

0000021e <__divmodhi4>:
 21e:	97 fb       	bst	r25, 7
 220:	07 2e       	mov	r0, r23
 222:	16 f4       	brtc	.+4      	; 0x228 <__divmodhi4+0xa>
 224:	00 94       	com	r0
 226:	07 d0       	rcall	.+14     	; 0x236 <__divmodhi4_neg1>
 228:	77 fd       	sbrc	r23, 7
 22a:	09 d0       	rcall	.+18     	; 0x23e <__divmodhi4_neg2>
 22c:	0e 94 23 01 	call	0x246	; 0x246 <__udivmodhi4>
 230:	07 fc       	sbrc	r0, 7
 232:	05 d0       	rcall	.+10     	; 0x23e <__divmodhi4_neg2>
 234:	3e f4       	brtc	.+14     	; 0x244 <__divmodhi4_exit>

00000236 <__divmodhi4_neg1>:
 236:	90 95       	com	r25
 238:	81 95       	neg	r24
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	08 95       	ret

0000023e <__divmodhi4_neg2>:
 23e:	70 95       	com	r23
 240:	61 95       	neg	r22
 242:	7f 4f       	sbci	r23, 0xFF	; 255

00000244 <__divmodhi4_exit>:
 244:	08 95       	ret

00000246 <__udivmodhi4>:
 246:	aa 1b       	sub	r26, r26
 248:	bb 1b       	sub	r27, r27
 24a:	51 e1       	ldi	r21, 0x11	; 17
 24c:	07 c0       	rjmp	.+14     	; 0x25c <__udivmodhi4_ep>

0000024e <__udivmodhi4_loop>:
 24e:	aa 1f       	adc	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	a6 17       	cp	r26, r22
 254:	b7 07       	cpc	r27, r23
 256:	10 f0       	brcs	.+4      	; 0x25c <__udivmodhi4_ep>
 258:	a6 1b       	sub	r26, r22
 25a:	b7 0b       	sbc	r27, r23

0000025c <__udivmodhi4_ep>:
 25c:	88 1f       	adc	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	5a 95       	dec	r21
 262:	a9 f7       	brne	.-22     	; 0x24e <__udivmodhi4_loop>
 264:	80 95       	com	r24
 266:	90 95       	com	r25
 268:	bc 01       	movw	r22, r24
 26a:	cd 01       	movw	r24, r26
 26c:	08 95       	ret

0000026e <strrev>:
 26e:	dc 01       	movw	r26, r24
 270:	fc 01       	movw	r30, r24
 272:	67 2f       	mov	r22, r23
 274:	71 91       	ld	r23, Z+
 276:	77 23       	and	r23, r23
 278:	e1 f7       	brne	.-8      	; 0x272 <strrev+0x4>
 27a:	32 97       	sbiw	r30, 0x02	; 2
 27c:	04 c0       	rjmp	.+8      	; 0x286 <strrev+0x18>
 27e:	7c 91       	ld	r23, X
 280:	6d 93       	st	X+, r22
 282:	70 83       	st	Z, r23
 284:	62 91       	ld	r22, -Z
 286:	ae 17       	cp	r26, r30
 288:	bf 07       	cpc	r27, r31
 28a:	c8 f3       	brcs	.-14     	; 0x27e <strrev+0x10>
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
